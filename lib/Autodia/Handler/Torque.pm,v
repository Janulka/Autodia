head	1.1;
access;
symbols;
locks
	aaron:1.1; strict;
comment	@# @;


1.1
date	2003.06.25.22.21.47;	author aaron;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@################################################################
# AutoDIA - Automatic Dia XML.   (C)Copyright 2001 A Trevena   #
#                                                              #
# AutoDIA comes with ABSOLUTELY NO WARRANTY; see COPYING file  #
# This is free software, and you are welcome to redistribute   #
# it under certain conditions; see COPYING file for details    #
################################################################
package Autodia::Handler::Torque;

require Exporter;

use strict;

use vars qw($VERSION @@ISA @@EXPORT);
use Autodia::Handler;

@@ISA = qw(Autodia::Handler Exporter);

use Autodia::Diagram;

#---------------------------------------------------------------

#####################
# Constructor Methods

# new inherited from Autodia::Handler

#------------------------------------------------------------------------
# Access Methods

# parse_file inherited from Autodia::Handler

#-----------------------------------------------------------------------------
# Internal Methods

# _initialise inherited from Autodia::Handler

sub _parse {
  my $self     = shift;
  my $fh       = shift;
  my $filename = shift;

  my $Diagram  = $self->{Diagram};
  my $xml = XMLin(join('',<$fh>));

  my %tables = ();
  my @@relationships = ();

  # process tables
  foreach my $tablename (keys %{$xml->{table}}) {
    my $Class = Autodia::Diagram::Class->new($tablename);
    $Diagram->add_class($Class);
    my $primary_key;
    $tables{$tablename} = $Class;

    # process columns
    foreach my $column (keys %{$xml->{table}{$tablename}{column}}) {
      $Class->add_attribute({
			     name => $column,
			     visibility => 0,
			     type => $xml->{table}{$tablename}{column}{$column}{type},
			    });

      if (defined $xml->{table}{$tablename}{column}{$column}{primaryKey}) {
	push (@@{$primary_key->{Param}}, { Name=>$column, Type=>''});
      }
    }

    # find foreign keys
    foreach my $fk (@@{$xml->{table}{$tablename}{'foreign-key'}}) {
      print "foreign key : ", $fk->{reference}{local}," ( table : ", $fk->{foreignTable} , " ) \n";
      $table->{columns}{$fk->{reference}{local}}{fk} = 1;
      $table->{columns}{$fk->{reference}{local}}{table} = $fk->{foreignTable};

      # create foreign key table or get it if already present
      my $Superclass = Autodia::Diagram::Superclass->new($fk->{foreignTable});
      my $exists_already = $self->{Diagram}->add_superclass($Superclass);
      if (ref $exists_already) {
	$Superclass = $exists_already;
      }

      # create new relationship
      my $Relationship = Autodia::Diagram::Inheritance->new($Class, $Superclass);
      # add Relationship to superclass
      $Superclass->add_inheritance($Relationship);
      # add Relationship to class
      $Class->add_inheritance($Relationship);
      # add Relationship to diagram
      $self->{Diagram}->add_inheritance($Relationship);
    }
    # add primary key
    $Class->add_operation($primary_key);
  }
}

1;

###############################################################################

=head1 NAME

Autodia::Handler::Torque.pm - AutoDia handler for Torque

=head1 INTRODUCTION

This provides Autodia with the ability to read Torque Database Schema files, allowing you to convert them via the Diagram Export methods to images (using GraphViz and VCG) or html/xml using custom templates or to Dia.

=head1 Description

The Torque handler will parse the xml file using XML::Simple and populating the diagram object with class, superclass, and relationships representing tables and relationships.

The Torque handler is registered in the Autodia.pm module, which contains a hash of language names and the name of their respective language.

=head1 SYNOPSIS

=item use Autodia::Handler::Torque;

=item my $handler = Autodia::Handler::dia->New(\%Config);

=item $handler->Parse(filename); # where filename includes full or relative path.

=head2 CONSTRUCTION METHOD

use Autodia::Handler::Torque;

my $handler = Autodia::Handler::Torque->New(\%Config);
This creates a new handler using the Configuration hash to provide rules selected at the command line.

=head2 ACCESS METHODS

$handler->Parse(filename); # where filename includes full or relative path.

This parses the named file and returns 1 if successful or 0 if the file could not be opened.

=cut
@
